#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    chosen { zmk,matrix-transform = &imprint_function_row_full_bottom_row; };

    behaviors {
        Ctrlhold: Ctrlhold {
            compatible = "zmk,behavior-hold-tap";
            label = "CTRLHOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <51 52 50 49 37>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC         &kp F1             &kp F2             &kp F3             &kp F4             &kp F5                     &kp F6         &kp F7        &kp F8          &kp F9            &kp F10            &kp F11
&tog 2          &kp N1             &kp N2             &kp N3             &kp N4             &kp N5                     &kp N6         &kp N7        &kp N8          &kp N9            &kp N0             &kp MINUS
&kp LCTRL       &kp Q              &kp W              &kp E              &kp R              &kp T                      &kp Y          &kp U         &kp I           &kp O             &kp P              &kp BSLH
&kp TAB         &Ctrlhold LC(A) A  &kp S              &kp D              &kp F              &kp G                      &kp H          &kp J         &kp K           &kp L             &kp SEMI           &kp SQT
&kp LEFT_SHIFT  &Ctrlhold LC(Z) Z  &Ctrlhold LC(X) X  &Ctrlhold LC(C) C  &Ctrlhold LC(V) V  &kp B                      &kp N          &kp M         &kp COMMA       &kp DOT           &kp FSLH           &kp RSHFT
&tog 5          &kp GRAVE          &kp LEFT_ALT       &kp LEFT_ARROW     &kp RIGHT_ARROW                                              &kp UP_ARROW  &kp DOWN_ARROW  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &tog 1
                                                                         &kp DEL            &kp HOME   &kp END         &kp PAGE_DOWN  &kp PAGE_UP   &kp RIGHT_ALT
                                                                         &kp BACKSPACE      &kp LCTRL  &kp LEFT_GUI    &kp CAPS       &kp ENTER     &kp SPACE
            >;
        };

        Numpad_Nav_Layer {
            bindings = <
&trans  &trans  &trans          &trans        &trans     &trans            &trans  &trans           &trans           &trans           &trans           &trans
&trans  &trans  &trans          &trans        &trans     &trans            &trans  &kp KP_NUM       &kp KP_DIVIDE    &kp KP_MULTIPLY  &kp BACKSPACE    &trans
&trans  &trans  &kp HOME        &kp UP_ARROW  &kp END    &trans            &trans  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_SUBTRACT  &trans
&trans  &trans  &kp LEFT_ARROW  &kp DOWN      &kp RIGHT  &trans            &trans  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp PLUS         &trans
&trans  &trans  &trans          &trans        &trans     &trans            &trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_EQUAL     &trans
&trans  &trans  &trans          &trans        &trans                               &trans           &trans           &trans           &trans           &trans
                                              &trans     &trans  &trans    &trans  &trans           &kp KP_NUMBER_0
                                              &trans     &trans  &trans    &trans  &trans           &trans
            >;
        };

        Keyboard_Control_Layer {
            bindings = <
&bt BT_CLR   &trans        &trans        &trans        &trans        &trans                  &trans  &trans           &trans           &trans           &trans           &trans
&trans       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4            &trans  &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &trans           &trans           &trans
&sys_reset   &trans        &trans        &trans        &trans        &trans                  &trans  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &sys_reset
&bootloader  &trans        &trans        &trans        &trans        &trans                  &trans  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &bootloader
&to 4        &trans        &trans        &trans        &trans        &trans                  &trans  &trans           &trans           &trans           &trans           &to 4
&to 4        &trans        &trans        &trans        &trans                                        &trans           &trans           &trans           &trans           &to 4
                                                       &trans        &trans        &trans    &trans  &trans           &trans
                                                       &trans        &trans        &trans    &trans  &trans           &trans
            >;
        };

        Auto_Mouse_Layer {
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &mkp RCLK  &mkp MCLK  &mkp LCLK  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans                               &trans  &trans  &trans  &trans  &trans
                                      &trans     &trans  &trans    &trans  &trans  &trans
                                      &trans     &trans  &trans    &trans  &trans  &trans
            >;
        };

        factory_test {
            bindings = <
&kp N0  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5            &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp N1
&kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7            &kp N8  &kp N9  &kp N0  &kp N1  &kp N2  &kp N3
&kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9            &kp N0  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5
&kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp N1            &kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7
&kp N8  &kp N9  &kp N0  &kp N1  &kp N2  &kp N3            &kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9
&kp N0  &kp N1  &kp N2  &kp N3  &kp N4                            &kp N6  &kp N7  &kp N8  &kp N9  &kp N0
                                &kp N1  &kp N2  &kp N3    &kp N4  &kp N5  &kp N6
                                &kp N7  &kp N8  &kp N9    &kp N0  &kp N1  &kp N2
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                            &trans  &trans  &trans  &trans  &trans
                                &trans  &trans  &trans    &trans  &trans  &trans
                                &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};

// right hand trackball configuration

&trackball_peripheral_listener {
    input-processors =
        //     activate layer 3 within 500ms of the trackball moving,,
        <&zip_temp_layer 3 500>;
};

//left hand trackball configuration

&trackball_central_listener {
    input-processors =
        // multiply sensitivity by 1, divide by 3 (make it slower for scrolling),,,
        <&zip_xy_scaler 1 3>,
        // make this trackball output scrolling events by default instead of cursor movement,,,
        <&zip_xy_to_scroll_mapper>,
        // invert vertical scrolling so that the view moves in the same direction as the top of the trackball.,,,
        <&zip_scroll_transform INPUT_TRANSFORM_Y_INVERT>;
};
